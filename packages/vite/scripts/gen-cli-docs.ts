import fs from 'node:fs/promises'
import { fileURLToPath } from 'node:url'
import path from 'node:path'
import {
  type DocsTopLevelOptions,
  generateDocsForSubcommand,
} from 'ordana-gen-docs'
import colors from 'picocolors'
import { cliOptions } from '../src/node/cli'

const _dirname = path.dirname(fileURLToPath(import.meta.url))
const cliDocsPath = path.resolve(_dirname, '../../../docs/guide/cli.md')

const docsOptions = {
  subcommands: {
    dev: {
      description: 'Start Vite dev server in the current directory.',
    },
    build: {
      description: 'Build for production.',
    },
    optimize: {
      description:
        'Pre-bundle dependencies.\n\n' +
        '**Deprecated**: the pre-bundle process runs automatically and does not need to be called.',
    },
    preview: {
      description:
        "Locally preview the production build. Do not use this as a production server as it's not designed for it.",
    },
  },
  globalArguments: {
    configLoader: {
      description:
        'use `bundle` to bundle the config with esbuild, or `runner` (experimental) to process it on the fly, or `native` (experimental) to load using the native runtime (default: `bundle`)',
    },
    profile: {
      description:
        'Start built-in Node.js inspector (check [Performance bottlenecks](/guide/troubleshooting#performance-bottlenecks)',
    },
  },
} satisfies DocsTopLevelOptions

const devContent = generateDocsForSubcommand(cliOptions, 'dev', docsOptions)
const buildContent = generateDocsForSubcommand(cliOptions, 'build', docsOptions)
const optimizeContent = generateDocsForSubcommand(
  cliOptions,
  'optimize',
  docsOptions,
)
const previewContent = generateDocsForSubcommand(
  cliOptions,
  'preview',
  docsOptions,
)

const content =
  `
<!-- This file is generated by \`packages/vite/scripts/gen-cli-docs.ts\`. Do not edit. -->

# Command Line Interface

## Dev server

${devContent}

## Build

${buildContent}

## Others

${optimizeContent}

${previewContent}
`.trim() + '\n'

const currentContent = await fs.readFile(cliDocsPath, 'utf-8')
if (currentContent === content) {
  process.exit(0)
}

await fs.writeFile(cliDocsPath, content)
console.warn(
  colors.yellow(
    '\nCLI documentation is updated. You should commit the updated file.\n',
  ),
)

diff --git a/dist/chunks/resolveConfig.Dha6ilPI.js b/dist/chunks/resolveConfig.Dha6ilPI.js
index dac3d35f0ebc93e7979e51d3df38964277a6e6c9..b175a9fbf077921781a1ade383109b4b4465cb7c 100644
--- a/dist/chunks/resolveConfig.Dha6ilPI.js
+++ b/dist/chunks/resolveConfig.Dha6ilPI.js
@@ -156,7 +156,7 @@ function requireUtils$1 () {
 
 		  flat(args);
 		  return result;
-		}; 
+		};
 	} (utils$1));
 	return utils$1;
 }
@@ -1806,7 +1806,7 @@ function requireUtils () {
 		    output = `(?:^(?!${output}).*$)`;
 		  }
 		  return output;
-		}; 
+		};
 	} (utils));
 	return utils;
 }
@@ -4578,7 +4578,7 @@ function createThreadsPool(ctx, { execArgv, env }) {
           ctx.state.addProcessTimeoutCause(
             `Failed to terminate worker while running ${files.join(
               ", "
-            )}. 
+            )}.
 See https://vitest.dev/guide/common-errors.html#failed-to-terminate-worker for troubleshooting.`
           );
         } else if (ctx.isCancelling && error instanceof Error && /The task has been cancelled/.test(error.message)) {
@@ -4837,7 +4837,7 @@ function createVmThreadsPool(ctx, { execArgv, env }) {
           ctx.state.addProcessTimeoutCause(
             `Failed to terminate worker while running ${files.join(
               ", "
-            )}. 
+            )}.
 See https://vitest.dev/guide/common-errors.html#failed-to-terminate-worker for troubleshooting.`
           );
         } else if (ctx.isCancelling && error instanceof Error && /The task has been cancelled/.test(error.message)) {
@@ -5208,7 +5208,7 @@ function createPool(ctx) {
   const potentialConditions = /* @__PURE__ */ new Set([
     "production",
     "development",
-    ...ctx.server.config.resolve.conditions
+    // ...ctx.server.config.resolve.conditions
   ]);
   const conditions = [...potentialConditions].filter((condition) => {
     if (condition === "production") {
